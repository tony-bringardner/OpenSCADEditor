/* The following code was generated by JFlex 1.4.1 on 1/23/19 8:38 AM */

/*
 * 02/05/2012
 *
 * OpenScadTokenMaker.java - Parses a document into JavaScript tokens.
 * 
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package com.bringardner.openscad.parser;

import java.io.*;
import javax.swing.text.Segment;
import java.util.Stack;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for JavaScript files.  Its states could be simplified, but are
 * kept the way they are to keep a degree of similarity (i.e. copy/paste)
 * between it and HTML/JSP/PHPTokenMaker.  This should cause no difference in
 * performance.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>OpenScadTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.9
 */

public class OpenScadTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int JS_STRING = 1;
  public static final int E4X = 6;
  public static final int E4X_INTAG = 10;
  public static final int E4X_PI = 8;
  public static final int JS_MLC = 3;
  public static final int JS_CHAR = 2;
  public static final int JS_EOL_COMMENT = 5;
  public static final int E4X_COMMENT = 7;
  public static final int JS_DOCCOMMENT = 4;
  public static final int E4X_DTD = 9;
  public static final int JS_TEMPLATE_LITERAL = 14;
  public static final int E4X_INATTR_SINGLE = 12;
  public static final int E4X_INATTR_DOUBLE = 11;
  public static final int JS_TEMPLATE_LITERAL_EXPR = 15;
  public static final int YYINITIAL = 0;
  public static final int E4X_CDATA = 13;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\75\1\2\1\0\1\1\1\11\22\0\1\75\1\36\1\77"+
    "\1\12\1\15\1\35\1\40\1\107\2\106\1\17\1\30\1\27\1\24"+
    "\1\25\1\16\1\5\7\7\2\4\1\41\1\76\1\31\1\32\1\34"+
    "\1\37\1\45\1\103\1\6\1\101\1\102\1\23\1\22\5\3\1\21"+
    "\7\3\1\104\3\3\1\20\2\3\1\100\1\13\1\105\1\33\1\14"+
    "\1\112\1\46\1\47\1\53\1\65\1\54\1\70\1\57\1\61\1\56"+
    "\1\110\1\64\1\55\1\44\1\60\1\62\1\66\1\73\1\52\1\50"+
    "\1\51\1\10\1\71\1\63\1\72\1\67\1\111\1\74\1\43\1\26"+
    "\1\42\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\2\1\3\0\1\2\1\3\1\4\1\5\2\6"+
    "\1\5\1\2\3\7\1\5\1\10\1\5\6\7\1\2"+
    "\15\5\1\11\1\12\1\13\1\1\1\14\1\15\1\16"+
    "\1\1\1\17\1\20\1\21\1\1\1\22\5\1\1\23"+
    "\10\1\1\24\3\1\2\5\1\25\1\26\1\27\1\30"+
    "\1\1\1\31\5\1\1\32\2\1\1\33\1\1\1\34"+
    "\1\35\1\36\2\37\1\40\1\41\1\42\1\43\1\1"+
    "\1\44\4\1\1\45\1\46\1\47\1\50\1\1\1\51"+
    "\1\1\1\52\1\2\1\53\1\6\1\54\1\53\1\54"+
    "\1\53\1\55\1\53\2\5\2\0\1\56\1\57\2\7"+
    "\2\0\1\60\1\7\24\5\1\61\10\5\1\62\1\63"+
    "\1\64\1\65\4\0\1\66\2\0\1\67\32\0\1\70"+
    "\1\26\1\71\1\72\1\27\5\0\1\73\2\0\1\74"+
    "\1\75\1\2\1\54\1\0\2\55\2\5\1\76\1\77"+
    "\37\5\64\0\1\100\2\0\1\101\5\0\1\102\1\2"+
    "\2\5\1\103\6\5\1\104\1\5\1\105\13\5\1\106"+
    "\5\5\1\0\1\1\1\0\1\107\15\0\1\110\45\0"+
    "\1\111\4\0\1\112\1\0\1\113\2\0\1\114\1\0"+
    "\1\115\1\2\20\5\15\0\1\110\20\0\1\110\20\0"+
    "\1\2\3\5\1\116\1\106\7\5\33\0\10\5\1\110"+
    "\4\0\1\110\12\0\4\5\6\0\2\5\2\0\1\117"+
    "\2\5\1\0\1\5\1\61\2\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[575];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2\0\u020d"+
    "\0\u0258\0\u02a3\0\u02ee\0\u0339\0\u0384\0\u03cf\0\u041a\0\u0465"+
    "\0\u04b0\0\u04fb\0\u0546\0\u0591\0\u05dc\0\u0627\0\u0672\0\u0546"+
    "\0\u06bd\0\u0708\0\u0753\0\u079e\0\u0546\0\u0546\0\u07e9\0\u0834"+
    "\0\u087f\0\u08ca\0\u0546\0\u0915\0\u0960\0\u09ab\0\u09f6\0\u0a41"+
    "\0\u0a8c\0\u0ad7\0\u0b22\0\u0b6d\0\u0bb8\0\u0c03\0\u0c4e\0\u0c99"+
    "\0\u0ce4\0\u0d2f\0\u0546\0\u0546\0\u0546\0\u0d7a\0\u0546\0\u0dc5"+
    "\0\u0546\0\u0e10\0\u0546\0\u0dc5\0\u0546\0\u0e5b\0\u0546\0\u0ea6"+
    "\0\u0ef1\0\u0f3c\0\u0f87\0\u0fd2\0\u0546\0\u101d\0\u1068\0\u10b3"+
    "\0\u10fe\0\u1149\0\u1194\0\u11df\0\u122a\0\u0546\0\u1275\0\u12c0"+
    "\0\u130b\0\u1356\0\u13a1\0\u0546\0\u13ec\0\u1437\0\u0546\0\u1482"+
    "\0\u0546\0\u14cd\0\u1518\0\u1563\0\u15ae\0\u15f9\0\u0546\0\u1644"+
    "\0\u168f\0\u0546\0\u16da\0\u0546\0\u0546\0\u0546\0\u1725\0\u1770"+
    "\0\u17bb\0\u0546\0\u0546\0\u0546\0\u1806\0\u0546\0\u1851\0\u189c"+
    "\0\u18e7\0\u1932\0\u0546\0\u0dc5\0\u197d\0\u0546\0\u19c8\0\u0546"+
    "\0\u1a13\0\u0546\0\u1a5e\0\u1aa9\0\u1aa9\0\u1aa9\0\u1af4\0\u1b3f"+
    "\0\u1b8a\0\u1bd5\0\u1c20\0\u1c6b\0\u1cb6\0\u1d01\0\u1d4c\0\u0546"+
    "\0\u1d97\0\u1d01\0\u1de2\0\u0708\0\u1de2\0\u0546\0\u1e2d\0\u1e78"+
    "\0\u1ec3\0\u1f0e\0\u1f59\0\u1fa4\0\u1fef\0\u203a\0\u2085\0\u20d0"+
    "\0\u211b\0\u2166\0\u21b1\0\u21fc\0\u2247\0\u2292\0\u22dd\0\u2328"+
    "\0\u2373\0\u23be\0\u2409\0\u0591\0\u2454\0\u249f\0\u24ea\0\u2535"+
    "\0\u2580\0\u25cb\0\u2616\0\u2661\0\u0546\0\u26ac\0\u26f7\0\u0546"+
    "\0\u2742\0\u278d\0\u27d8\0\u2823\0\u0546\0\u286e\0\u28b9\0\u0546"+
    "\0\u2904\0\u294f\0\u299a\0\u29e5\0\u2a30\0\u2a7b\0\u2ac6\0\u2b11"+
    "\0\u2b5c\0\u2ba7\0\u2bf2\0\u2c3d\0\u2c88\0\u2cd3\0\u2d1e\0\u2d69"+
    "\0\u2db4\0\u2dff\0\u2e4a\0\u2e95\0\u2ee0\0\u2f2b\0\u2f76\0\u2fc1"+
    "\0\u300c\0\u3057\0\u30a2\0\u30ed\0\u3138\0\u0546\0\u0546\0\u3183"+
    "\0\u31ce\0\u3219\0\u3264\0\u32af\0\u0546\0\u32fa\0\u3345\0\u0546"+
    "\0\u0546\0\u3390\0\u33db\0\u3426\0\u1aa9\0\u3471\0\u34bc\0\u3507"+
    "\0\u3552\0\u359d\0\u35e8\0\u3633\0\u367e\0\u36c9\0\u3714\0\u375f"+
    "\0\u37aa\0\u37f5\0\u3840\0\u388b\0\u38d6\0\u3921\0\u396c\0\u39b7"+
    "\0\u3a02\0\u3a4d\0\u3a98\0\u3ae3\0\u3b2e\0\u3b79\0\u3bc4\0\u3c0f"+
    "\0\u3c5a\0\u3ca5\0\u3cf0\0\u3d3b\0\u3d86\0\u3dd1\0\u3e1c\0\u3e67"+
    "\0\u3eb2\0\u3efd\0\u3f48\0\u3f93\0\u3fde\0\u4029\0\u4074\0\u40bf"+
    "\0\u410a\0\u4155\0\u41a0\0\u41eb\0\u4236\0\u4281\0\u42cc\0\u4317"+
    "\0\u4362\0\u43ad\0\u43f8\0\u4443\0\u448e\0\u44d9\0\u4524\0\u456f"+
    "\0\u45ba\0\u4605\0\u4650\0\u469b\0\u46e6\0\u4731\0\u477c\0\u47c7"+
    "\0\u4812\0\u485d\0\u48a8\0\u48f3\0\u493e\0\u4989\0\u49d4\0\u4a1f"+
    "\0\u4a6a\0\u4ab5\0\u4b00\0\u4b4b\0\u4b96\0\u4be1\0\u4c2c\0\u4c77"+
    "\0\u4cc2\0\u4d0d\0\u4d58\0\u4da3\0\u4dee\0\u4e39\0\u4e84\0\u4ecf"+
    "\0\u0546\0\u4f1a\0\u4f65\0\u4fb0\0\u4ffb\0\u5046\0\u0546\0\u5091"+
    "\0\u50dc\0\u5127\0\u0546\0\u5172\0\u51bd\0\u5208\0\u5253\0\u529e"+
    "\0\u52e9\0\u0591\0\u5334\0\u0591\0\u537f\0\u53ca\0\u5415\0\u5460"+
    "\0\u54ab\0\u54f6\0\u5541\0\u558c\0\u55d7\0\u5622\0\u566d\0\u0591"+
    "\0\u56b8\0\u5703\0\u574e\0\u5799\0\u57e4\0\u26f7\0\u0546\0\u582f"+
    "\0\u587a\0\u58c5\0\u5910\0\u595b\0\u59a6\0\u59f1\0\u5a3c\0\u5a87"+
    "\0\u5ad2\0\u5b1d\0\u5b68\0\u5bb3\0\u5bfe\0\u5c49\0\u0546\0\u5c94"+
    "\0\u5cdf\0\u5d2a\0\u5d75\0\u5dc0\0\u5e0b\0\u5e56\0\u5ea1\0\u5eec"+
    "\0\u5f37\0\u5f82\0\u5fcd\0\u6018\0\u6063\0\u60ae\0\u60f9\0\u6144"+
    "\0\u618f\0\u61da\0\u6225\0\u6270\0\u62bb\0\u6306\0\u6351\0\u639c"+
    "\0\u63e7\0\u6432\0\u647d\0\u64c8\0\u6513\0\u655e\0\u65a9\0\u65f4"+
    "\0\u663f\0\u668a\0\u66d5\0\u6720\0\u676b\0\u67b6\0\u6801\0\u684c"+
    "\0\u6897\0\u68e2\0\u692d\0\u0546\0\u6978\0\u69c3\0\u6a0e\0\u6a59"+
    "\0\u0546\0\u6aa4\0\u6aef\0\u6b3a\0\u6b85\0\u6bd0\0\u6c1b\0\u6c66"+
    "\0\u6cb1\0\u6cfc\0\u6d47\0\u6d92\0\u6ddd\0\u6e28\0\u6e73\0\u6ebe"+
    "\0\u6f09\0\u6f54\0\u587a\0\u6f9f\0\u6fea\0\u7035\0\u7080\0\u70cb"+
    "\0\u7116\0\u7161\0\u71ac\0\u71f7\0\u7242\0\u728d\0\u72d8\0\u7323"+
    "\0\u736e\0\u73b9\0\u7404\0\u744f\0\u749a\0\u74e5\0\u7530\0\u757b"+
    "\0\u75c6\0\u7611\0\u765c\0\u76a7\0\u76f2\0\u773d\0\u7788\0\u77d3"+
    "\0\u781e\0\u7869\0\u78b4\0\u78ff\0\u794a\0\u7995\0\u79e0\0\u7a2b"+
    "\0\u676b\0\u7a76\0\u7ac1\0\u7b0c\0\u68e2\0\u7b57\0\u7ba2\0\u6a0e"+
    "\0\u7bed\0\u7c38\0\u7c83\0\u7cce\0\u7d19\0\u0591\0\u7d64\0\u7daf"+
    "\0\u7dfa\0\u7d64\0\u7e45\0\u7e90\0\u7edb\0\u7f26\0\u7f71\0\u7fbc"+
    "\0\u8007\0\u8052\0\u809d\0\u80e8\0\u8133\0\u817e\0\u81c9\0\u8214"+
    "\0\u825f\0\u82aa\0\u82f5\0\u8340\0\u838b\0\u83d6\0\u8421\0\u846c"+
    "\0\u84b7\0\u8502\0\u854d\0\u8598\0\u85e3\0\u862e\0\u8679\0\u86c4"+
    "\0\u870f\0\u875a\0\u87a5\0\u87f0\0\u883b\0\u8886\0\u88d1\0\u891c"+
    "\0\u8967\0\u89b2\0\u89fd\0\u8a48\0\u8a93\0\u8ade\0\u5d2a\0\u8b29"+
    "\0\u8b74\0\u8bbf\0\u8c0a\0\u8c55\0\u8ca0\0\u8ceb\0\u8d36\0\u8d81"+
    "\0\u8dcc\0\u8e17\0\u8e62\0\u8ead\0\u8ef8\0\u8f43\0\u8f8e\0\u8fd9"+
    "\0\u9024\0\u906f\0\u90ba\0\u9105\0\u9150\0\u919b\0\u91e6\0\u0546"+
    "\0\u9231\0\u927c\0\u92c7\0\u9312\0\u935d\0\u93a8\0\u93f3";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[575];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\24\1\25"+
    "\1\27\1\30\2\21\2\24\1\31\1\32\4\24\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\32\1\42"+
    "\2\32\1\43\1\44\2\43\1\45\1\46\1\21\2\24"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\2\24"+
    "\1\56\1\57\2\24\1\60\1\61\1\24\1\62\3\24"+
    "\1\35\1\22\1\36\1\63\1\35\4\24\2\35\1\64"+
    "\2\24\1\65\2\66\1\67\10\66\1\70\63\66\1\71"+
    "\13\66\2\72\1\73\10\72\1\74\73\72\1\75\3\72"+
    "\2\76\1\77\14\76\1\100\41\76\1\101\1\76\1\102"+
    "\4\76\1\103\22\76\2\104\1\105\14\104\1\106\11\104"+
    "\1\107\13\104\1\110\13\104\1\111\1\104\1\112\4\104"+
    "\1\113\3\104\1\114\16\104\2\115\1\116\56\115\1\117"+
    "\1\115\1\120\4\115\1\121\22\115\1\122\1\123\1\124"+
    "\26\122\1\125\6\122\1\126\34\122\1\22\1\127\14\122"+
    "\2\130\1\131\21\130\1\132\34\130\1\133\1\130\1\134"+
    "\4\130\1\135\22\130\2\136\1\137\34\136\1\140\53\136"+
    "\2\141\1\142\26\141\1\143\2\141\1\144\43\141\1\145"+
    "\4\141\1\146\5\141\1\147\1\150\1\0\13\147\1\151"+
    "\13\147\1\43\1\147\1\152\40\147\1\22\1\147\1\153"+
    "\7\147\1\154\3\147\77\155\1\156\13\155\107\157\1\156"+
    "\3\157\105\160\1\161\5\160\2\162\1\163\10\162\1\164"+
    "\1\162\1\165\74\162\1\166\2\167\1\170\12\167\1\171"+
    "\10\167\1\172\64\167\1\21\2\0\6\21\1\0\4\21"+
    "\2\0\4\21\20\0\30\21\5\0\4\21\3\0\2\21"+
    "\2\0\1\22\73\0\1\22\130\0\1\21\2\0\6\24"+
    "\1\0\1\21\1\173\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\26\24\5\0\4\24\3\0\2\24\1\0\1\174"+
    "\2\0\1\174\2\25\1\174\1\25\1\174\1\0\4\174"+
    "\2\0\1\174\1\175\1\176\1\177\1\0\1\200\16\0"+
    "\10\174\1\177\1\175\7\174\1\176\2\174\1\176\3\174"+
    "\5\0\1\174\1\176\2\174\3\0\2\174\1\0\1\174"+
    "\2\0\1\174\1\201\1\202\1\174\1\202\1\174\1\0"+
    "\4\174\2\0\1\203\1\175\1\176\1\177\1\0\1\200"+
    "\16\0\10\174\1\177\1\175\7\174\1\176\2\174\1\176"+
    "\1\174\1\203\1\174\5\0\1\174\1\176\2\174\3\0"+
    "\2\174\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\2\24\1\204"+
    "\7\24\1\205\13\24\5\0\4\24\3\0\2\24\1\0"+
    "\13\206\1\207\2\206\1\210\1\211\12\206\1\212\60\206"+
    "\32\0\1\43\104\0\1\43\5\0\1\43\64\0\2\200"+
    "\1\0\1\200\133\0\1\43\1\0\1\213\111\0\1\214"+
    "\1\43\61\0\1\215\27\0\1\216\1\43\42\0\1\215"+
    "\47\0\1\43\1\0\1\217\110\0\1\43\5\0\1\43"+
    "\104\0\1\43\10\0\1\43\47\0\1\21\2\0\5\24"+
    "\1\220\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\10\24\1\221\3\24\1\222\11\24\5\0"+
    "\4\24\3\0\2\24\1\0\1\21\2\0\5\24\1\223"+
    "\1\0\1\21\1\173\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\5\24\1\224\12\24\1\225\4\24\1\226\5\0"+
    "\4\24\3\0\2\24\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\173\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\4\24\1\227\1\24\1\230\17\24\5\0\4\24\3\0"+
    "\2\24\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\6\24\1\231"+
    "\5\24\1\232\11\24\5\0\4\24\3\0\2\24\1\0"+
    "\1\21\2\0\5\24\1\233\1\0\1\21\1\173\2\24"+
    "\2\0\4\24\20\0\1\24\1\21\10\24\1\234\2\24"+
    "\1\235\1\236\4\24\1\237\4\24\5\0\4\24\3\0"+
    "\2\24\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\5\24\1\240"+
    "\1\24\1\241\16\24\5\0\4\24\3\0\2\24\1\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\173\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\10\24\1\242\15\24\5\0"+
    "\4\24\3\0\2\24\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\173\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\12\24\1\243\7\24\1\244\3\24\5\0\4\24\3\0"+
    "\2\24\1\0\1\21\2\0\5\24\1\245\1\0\1\21"+
    "\1\173\2\24\2\0\4\24\20\0\1\24\1\21\26\24"+
    "\5\0\4\24\3\0\2\24\1\0\1\21\2\0\6\24"+
    "\1\0\1\21\1\173\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\22\24\1\246\3\24\5\0\4\24\3\0\2\24"+
    "\1\0\1\21\2\0\6\24\1\0\1\21\1\173\2\24"+
    "\2\0\4\24\20\0\1\24\1\21\10\24\1\247\15\24"+
    "\5\0\4\24\3\0\2\24\1\0\1\21\2\0\6\24"+
    "\1\0\1\21\1\173\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\4\24\1\250\7\24\1\251\11\24\5\0\4\24"+
    "\3\0\2\24\1\0\1\21\2\0\5\24\1\252\1\0"+
    "\1\21\1\173\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\1\253\13\24\1\254\11\24\5\0\4\24\3\0\2\24"+
    "\1\0\2\66\1\0\10\66\1\0\63\66\1\0\13\66"+
    "\2\255\1\0\5\255\1\256\61\255\1\257\20\255\2\72"+
    "\1\0\10\72\1\0\73\72\1\0\3\72\2\76\1\0"+
    "\14\76\1\0\41\76\1\0\1\76\1\0\4\76\1\0"+
    "\22\76\16\0\1\260\145\0\1\261\124\0\1\262\100\0"+
    "\1\263\4\0\1\264\34\0\2\104\1\0\14\104\1\0"+
    "\11\104\1\0\13\104\1\0\13\104\1\0\1\104\1\0"+
    "\4\104\1\0\3\104\1\0\16\104\16\0\1\265\77\0"+
    "\1\266\2\0\1\266\1\0\1\266\5\0\1\267\1\0"+
    "\4\266\10\0\1\270\7\0\1\266\1\0\26\266\5\0"+
    "\4\266\3\0\2\266\45\0\1\271\1\0\1\272\1\273"+
    "\1\274\1\275\1\276\1\277\1\300\1\301\1\302\1\303"+
    "\1\304\3\0\1\305\1\306\1\307\1\0\1\310\1\311"+
    "\72\0\1\312\124\0\1\313\100\0\1\314\4\0\1\315"+
    "\101\0\1\316\45\0\2\115\1\0\56\115\1\0\1\115"+
    "\1\0\4\115\1\0\22\115\51\0\1\317\124\0\1\320"+
    "\100\0\1\321\4\0\1\322\34\0\2\122\1\0\26\122"+
    "\1\0\6\122\1\0\34\122\2\0\15\122\1\123\1\0"+
    "\26\122\1\0\6\122\1\0\34\122\1\22\1\0\14\122"+
    "\3\0\1\323\2\0\1\323\1\0\1\323\3\0\1\323"+
    "\1\0\1\324\1\0\4\323\12\0\1\325\1\326\1\0"+
    "\1\323\2\0\1\323\1\0\26\323\5\0\4\323\3\0"+
    "\2\323\1\0\75\126\1\0\1\327\14\126\2\130\1\0"+
    "\21\130\1\0\34\130\1\0\1\130\1\0\4\130\1\0"+
    "\22\130\24\0\1\330\137\0\1\331\124\0\1\332\100\0"+
    "\1\333\4\0\1\334\34\0\2\136\1\0\34\136\1\0"+
    "\53\136\34\0\1\335\56\0\2\141\1\0\26\141\1\0"+
    "\2\141\1\0\43\141\1\0\4\141\1\0\5\141\36\0"+
    "\1\336\54\0\2\147\1\0\13\147\1\0\13\147\1\0"+
    "\1\147\1\0\40\147\1\0\1\147\1\0\7\147\1\0"+
    "\4\147\1\150\1\0\13\147\1\0\13\147\1\0\1\147"+
    "\1\0\40\147\1\22\1\147\1\0\7\147\1\0\3\147"+
    "\34\0\1\152\56\0\77\155\1\0\13\155\107\157\1\0"+
    "\3\157\105\160\1\0\5\160\105\0\1\337\5\0\2\162"+
    "\1\0\10\162\1\0\1\162\1\0\74\162\75\0\1\340"+
    "\16\0\2\167\1\0\12\167\1\0\10\167\1\0\64\167"+
    "\74\0\1\341\16\0\1\21\2\0\5\21\1\342\1\0"+
    "\4\21\2\0\4\21\20\0\30\21\5\0\4\21\3\0"+
    "\2\21\1\0\1\174\2\0\6\174\1\0\4\174\2\0"+
    "\4\174\20\0\30\174\5\0\4\174\3\0\2\174\1\0"+
    "\1\174\2\0\1\174\2\343\1\174\1\343\1\174\1\0"+
    "\4\174\2\0\4\174\1\344\3\0\1\344\13\0\30\174"+
    "\5\0\4\174\3\0\2\174\1\0\1\174\2\0\1\174"+
    "\2\200\1\174\1\200\1\174\1\0\4\174\2\0\2\174"+
    "\1\176\1\177\20\0\10\174\1\177\10\174\1\176\2\174"+
    "\1\176\3\174\5\0\1\174\1\176\2\174\3\0\2\174"+
    "\1\0\1\174\2\0\1\174\2\201\1\174\1\201\1\174"+
    "\1\0\4\174\2\0\2\174\1\176\1\177\1\0\1\200"+
    "\16\0\10\174\1\177\10\174\1\176\2\174\1\176\3\174"+
    "\5\0\1\174\1\176\2\174\3\0\2\174\1\0\1\174"+
    "\2\0\1\174\1\201\1\202\1\174\1\202\1\174\1\0"+
    "\4\174\2\0\1\174\1\345\1\176\1\177\1\0\1\200"+
    "\16\0\10\174\1\177\1\345\7\174\1\176\2\174\1\176"+
    "\3\174\5\0\1\174\1\176\2\174\3\0\2\174\1\0"+
    "\1\174\2\0\1\174\4\346\1\174\1\0\4\174\2\0"+
    "\2\174\2\346\20\0\2\174\2\346\3\174\2\346\10\174"+
    "\1\346\2\174\1\346\3\174\5\0\3\346\1\174\3\0"+
    "\2\174\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\6\24\1\244"+
    "\17\24\5\0\4\24\3\0\2\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\10\24\1\347\6\24\1\350\6\24\5\0"+
    "\4\24\3\0\2\24\1\0\13\206\1\207\2\206\1\351"+
    "\76\206\1\0\110\206\17\0\1\352\74\0\1\215\27\0"+
    "\1\216\43\0\1\215\47\0\1\43\1\0\1\32\56\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\173\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\7\24\1\353\16\24\5\0"+
    "\4\24\3\0\2\24\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\173\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\4\24\1\354\5\24\1\355\13\24\5\0\4\24\3\0"+
    "\2\24\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\17\24\1\356"+
    "\6\24\5\0\4\24\3\0\2\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\4\24\1\357\21\24\5\0\4\24\3\0"+
    "\2\24\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\1\360\25\24"+
    "\5\0\4\24\3\0\2\24\1\0\1\21\2\0\6\24"+
    "\1\0\1\21\1\173\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\13\24\1\361\12\24\5\0\4\24\3\0\2\24"+
    "\1\0\1\21\2\0\5\24\1\362\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\26\24\5\0"+
    "\4\24\3\0\2\24\1\0\1\21\2\0\5\24\1\363"+
    "\1\0\1\21\1\173\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\1\364\25\24\5\0\4\24\3\0\2\24\1\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\173\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\24\24\1\365\1\24\5\0"+
    "\4\24\3\0\2\24\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\173\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\2\24\1\366\1\367\6\24\1\370\13\24\5\0\4\24"+
    "\3\0\2\24\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\173\2\24\2\0\4\24\20\0\1\24\1\21\3\24"+
    "\1\371\22\24\5\0\4\24\3\0\2\24\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\173\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\1\24\1\372\24\24\5\0\4\24"+
    "\3\0\2\24\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\173\2\24\2\0\4\24\20\0\1\24\1\21\4\24"+
    "\1\373\21\24\5\0\4\24\3\0\2\24\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\173\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\10\24\1\374\15\24\5\0\4\24"+
    "\3\0\2\24\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\173\2\24\2\0\4\24\20\0\1\24\1\21\7\24"+
    "\1\375\16\24\5\0\4\24\3\0\2\24\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\173\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\7\24\1\376\16\24\5\0\4\24"+
    "\3\0\2\24\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\173\2\24\2\0\4\24\20\0\1\24\1\21\13\24"+
    "\1\377\12\24\5\0\4\24\3\0\2\24\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\173\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\2\24\1\204\23\24\5\0\4\24"+
    "\3\0\2\24\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\173\2\24\2\0\4\24\20\0\1\24\1\21\12\24"+
    "\1\u0100\13\24\5\0\4\24\3\0\2\24\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\173\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\3\24\1\u0101\1\24\1\u0102\20\24"+
    "\5\0\4\24\3\0\2\24\1\0\1\21\2\0\6\24"+
    "\1\0\1\21\1\173\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\7\24\1\u0103\16\24\5\0\4\24\3\0\2\24"+
    "\1\0\1\21\2\0\6\24\1\0\1\21\1\173\2\24"+
    "\2\0\4\24\20\0\1\24\1\21\22\24\1\u0104\3\24"+
    "\5\0\4\24\3\0\2\24\1\0\1\21\2\0\6\24"+
    "\1\0\1\21\1\173\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\22\24\1\u0105\3\24\5\0\4\24\3\0\2\24"+
    "\1\0\1\21\2\0\6\24\1\0\1\21\1\173\2\24"+
    "\2\0\4\24\20\0\1\24\1\21\14\24\1\u0106\11\24"+
    "\5\0\4\24\3\0\2\24\1\0\1\21\2\0\6\24"+
    "\1\0\1\21\1\173\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\7\24\1\u0107\16\24\5\0\4\24\3\0\2\24"+
    "\1\0\1\21\2\0\6\24\1\0\1\21\1\173\2\24"+
    "\2\0\4\24\20\0\1\24\1\21\12\24\1\u0108\13\24"+
    "\5\0\4\24\3\0\2\24\1\0\1\21\2\0\6\24"+
    "\1\0\1\21\1\173\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\7\24\1\u0109\16\24\5\0\4\24\3\0\2\24"+
    "\1\0\1\21\2\0\6\24\1\0\1\21\1\173\2\24"+
    "\2\0\4\24\20\0\1\24\1\21\4\24\1\244\21\24"+
    "\5\0\4\24\3\0\2\24\5\0\4\u010a\12\0\2\u010a"+
    "\22\0\2\u010a\3\0\2\u010a\10\0\1\u010a\2\0\1\u010a"+
    "\10\0\3\u010a\13\0\4\u010b\12\0\2\u010b\22\0\2\u010b"+
    "\3\0\2\u010b\10\0\1\u010b\2\0\1\u010b\10\0\3\u010b"+
    "\60\0\1\u010c\124\0\1\u010d\115\0\1\u010e\101\0\1\u010f"+
    "\35\0\34\266\1\270\56\266\3\0\1\266\2\0\1\266"+
    "\1\0\1\266\7\0\4\266\10\0\1\270\7\0\1\266"+
    "\1\0\26\266\5\0\4\266\3\0\2\266\55\0\1\u0110"+
    "\1\0\1\u0111\3\0\1\u0112\40\0\1\u0113\36\0\1\u0114"+
    "\3\0\1\u0115\1\0\1\u0116\117\0\1\u0117\40\0\1\u0118"+
    "\40\0\1\u0119\2\0\1\u011a\1\0\1\u011b\115\0\1\u011c"+
    "\1\u011d\4\0\1\u011e\77\0\1\u011f\104\0\1\u0120\6\0"+
    "\1\u0121\4\0\1\u0122\110\0\1\u0123\10\0\1\u0124\1\u0125"+
    "\74\0\1\u0126\1\0\1\u0127\113\0\1\u0128\1\u0129\107\0"+
    "\1\u012a\103\0\1\u012b\122\0\1\u012c\110\0\1\u012d\46\0"+
    "\1\u012e\35\0\1\u012f\3\0\1\u0130\116\0\1\u0131\102\0"+
    "\1\u0132\5\0\1\u0133\107\0\1\u0134\124\0\1\u0135\115\0"+
    "\1\u0136\101\0\1\u0137\106\0\1\u0138\3\0\1\u0139\106\0"+
    "\1\u013a\124\0\1\u013b\115\0\1\u013c\101\0\1\u013d\40\0"+
    "\6\323\3\0\1\323\3\0\6\323\13\0\1\323\2\0"+
    "\1\323\1\0\26\323\5\0\4\323\3\0\2\323\4\0"+
    "\1\u013e\2\0\1\u013e\1\0\1\u013e\3\0\1\u013e\3\0"+
    "\4\u013e\15\0\1\u013e\2\0\1\u013e\1\0\26\u013e\5\0"+
    "\4\u013e\3\0\2\u013e\25\0\1\u013f\53\0\1\u0140\46\0"+
    "\1\u0141\127\0\1\u0142\124\0\1\u0143\115\0\1\u0144\101\0"+
    "\1\u0145\61\0\1\u0146\122\0\1\u0147\56\0\1\21\2\0"+
    "\1\21\4\u0148\1\21\1\0\4\21\2\0\2\21\2\u0148"+
    "\20\0\2\21\2\u0148\3\21\2\u0148\10\21\1\u0148\2\21"+
    "\1\u0148\3\21\5\0\3\u0148\1\21\3\0\2\21\1\0"+
    "\1\174\2\0\1\174\2\343\1\174\1\343\1\174\1\0"+
    "\4\174\2\0\2\174\1\176\1\174\20\0\21\174\1\176"+
    "\2\174\1\176\3\174\5\0\1\174\1\176\2\174\3\0"+
    "\2\174\5\0\2\343\1\0\1\343\103\0\1\174\2\0"+
    "\1\174\4\346\1\174\1\0\4\174\2\0\1\174\1\345"+
    "\2\346\20\0\2\174\2\346\3\174\2\346\1\345\7\174"+
    "\1\346\2\174\1\346\3\174\5\0\3\346\1\174\3\0"+
    "\2\174\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\14\24\1\u0149"+
    "\11\24\5\0\4\24\3\0\2\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\6\24\1\u014a\17\24\5\0\4\24\3\0"+
    "\2\24\45\0\1\351\11\0\2\351\51\0\1\u014b\74\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\173\2\24\2\0"+
    "\4\24\20\0\1\u014c\1\21\26\24\5\0\4\24\3\0"+
    "\2\24\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\4\24\1\375"+
    "\21\24\5\0\4\24\3\0\2\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\16\24\1\u014d\7\24\5\0\4\24\3\0"+
    "\2\24\1\0\1\21\2\0\5\24\1\u014e\1\0\1\21"+
    "\1\173\2\24\2\0\4\24\20\0\1\24\1\21\26\24"+
    "\5\0\4\24\3\0\2\24\1\0\1\21\2\0\6\24"+
    "\1\0\1\21\1\173\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\22\24\1\u014f\3\24\5\0\4\24\3\0\2\24"+
    "\1\0\1\21\2\0\6\24\1\0\1\21\1\173\2\24"+
    "\2\0\4\24\20\0\1\24\1\21\7\24\1\u0150\16\24"+
    "\5\0\4\24\3\0\2\24\1\0\1\21\2\0\6\24"+
    "\1\0\1\21\1\173\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\6\24\1\u0151\17\24\5\0\4\24\3\0\2\24"+
    "\1\0\1\21\2\0\6\24\1\0\1\21\1\173\2\24"+
    "\2\0\4\24\20\0\1\24\1\21\1\u0151\25\24\5\0"+
    "\4\24\3\0\2\24\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\173\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\6\24\1\u0152\17\24\5\0\4\24\3\0\2\24\1\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\173\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\12\24\1\u0153\13\24\5\0"+
    "\4\24\3\0\2\24\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\173\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\3\24\1\u0154\22\24\5\0\4\24\3\0\2\24\1\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\173\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\10\24\1\u0155\15\24\5\0"+
    "\4\24\3\0\2\24\1\0\1\21\2\0\5\24\1\u0156"+
    "\1\0\1\21\1\173\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\26\24\5\0\4\24\3\0\2\24\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\173\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\17\24\1\u0157\6\24\5\0\4\24"+
    "\3\0\2\24\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\173\2\24\2\0\4\24\20\0\1\24\1\21\1\u0158"+
    "\25\24\5\0\4\24\3\0\2\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\6\24\1\u0154\17\24\5\0\4\24\3\0"+
    "\2\24\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\5\24\1\u0159"+
    "\20\24\5\0\4\24\3\0\2\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\7\24\1\u015a\16\24\5\0\4\24\3\0"+
    "\2\24\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\14\24\1\u015b"+
    "\11\24\5\0\4\24\3\0\2\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\10\24\1\u015c\15\24\5\0\4\24\3\0"+
    "\2\24\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\14\24\1\244"+
    "\11\24\5\0\4\24\3\0\2\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\6\24\1\u015d\17\24\5\0\4\24\3\0"+
    "\2\24\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\6\24\1\u015e"+
    "\17\24\5\0\4\24\3\0\2\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\7\24\1\u015f\16\24\5\0\4\24\3\0"+
    "\2\24\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\7\24\1\u0160"+
    "\16\24\5\0\4\24\3\0\2\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\2\24\1\u0161\23\24\5\0\4\24\3\0"+
    "\2\24\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\22\24\1\u0162"+
    "\3\24\5\0\4\24\3\0\2\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\26\24\5\0\4\24\3\0\1\u0163\1\24"+
    "\1\0\1\21\2\0\6\24\1\0\1\21\1\173\2\24"+
    "\2\0\4\24\20\0\1\24\1\21\21\24\1\u0164\4\24"+
    "\5\0\4\24\3\0\2\24\1\0\1\21\2\0\6\24"+
    "\1\0\1\21\1\173\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\5\24\1\u0165\20\24\5\0\4\24\3\0\2\24"+
    "\1\0\1\21\2\0\6\24\1\0\1\21\1\173\2\24"+
    "\2\0\4\24\20\0\1\24\1\21\2\24\1\363\23\24"+
    "\5\0\4\24\3\0\2\24\5\0\4\u0166\12\0\2\u0166"+
    "\22\0\2\u0166\3\0\2\u0166\10\0\1\u0166\2\0\1\u0166"+
    "\10\0\3\u0166\13\0\4\u0167\12\0\2\u0167\22\0\2\u0167"+
    "\3\0\2\u0167\10\0\1\u0167\2\0\1\u0167\10\0\3\u0167"+
    "\75\0\1\u0168\51\0\1\u0169\126\0\1\u016a\125\0\1\u010e"+
    "\102\0\1\u016b\4\0\1\u016c\133\0\1\u016d\105\0\1\u016e"+
    "\76\0\1\u016f\5\0\1\u0170\103\0\1\u0171\115\0\1\u0172"+
    "\115\0\1\u0173\106\0\1\u0174\104\0\1\u0175\114\0\1\u0176"+
    "\120\0\1\u0177\116\0\1\u0178\104\0\1\u0179\3\0\1\u017a"+
    "\121\0\1\u017b\113\0\1\u017c\72\0\1\u017d\2\0\1\u017e"+
    "\21\0\1\u017f\74\0\1\u0180\103\0\1\u0181\124\0\1\u0182"+
    "\5\0\1\u0183\34\0\1\u0184\156\0\1\u0185\104\0\1\u0186"+
    "\2\0\1\u0187\14\0\1\u0188\104\0\1\u0189\105\0\1\u018a"+
    "\4\0\1\u018b\112\0\1\u018c\102\0\1\u018d\7\0\1\u018e"+
    "\114\0\1\u018f\74\0\1\u0190\126\0\1\u0191\102\0\1\u0192"+
    "\15\0\1\u0193\1\0\1\u0194\71\0\1\u0195\115\0\1\u0196"+
    "\116\0\1\u0197\3\0\1\u0198\102\0\1\u0199\2\0\1\u011a"+
    "\107\0\1\u019a\112\0\1\u019b\126\0\1\u019c\51\0\1\u019d"+
    "\126\0\1\u019e\125\0\1\u0136\46\0\1\u019f\160\0\1\u01a0"+
    "\122\0\1\u01a1\51\0\1\u01a2\126\0\1\u01a3\125\0\1\u013c"+
    "\41\0\6\u013e\3\0\1\u013e\3\0\6\u013e\13\0\1\u013e"+
    "\2\0\1\u013e\1\0\26\u013e\5\0\4\u013e\3\0\2\u013e"+
    "\25\0\1\u01a4\167\0\1\u01a5\77\0\1\u01a6\51\0\1\u01a7"+
    "\126\0\1\u01a8\125\0\1\u0144\62\0\1\u01a9\66\0\1\21"+
    "\2\0\1\21\4\u01aa\1\21\1\0\4\21\2\0\2\21"+
    "\2\u01aa\20\0\2\21\2\u01aa\3\21\2\u01aa\10\21\1\u01aa"+
    "\2\21\1\u01aa\3\21\5\0\3\u01aa\1\21\3\0\2\21"+
    "\1\0\1\21\2\0\6\24\1\0\1\21\1\173\2\24"+
    "\2\0\4\24\20\0\1\24\1\21\12\24\1\244\13\24"+
    "\5\0\4\24\3\0\2\24\1\0\1\21\2\0\6\24"+
    "\1\0\1\21\1\173\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\22\24\1\244\3\24\5\0\4\24\3\0\2\24"+
    "\1\0\1\21\2\0\6\24\1\0\1\21\1\173\2\24"+
    "\2\0\4\24\20\0\1\24\1\21\1\u01ab\25\24\5\0"+
    "\4\24\3\0\2\24\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\173\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\14\24\1\u01ac\11\24\5\0\4\24\3\0\2\24\1\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\173\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\7\24\1\204\16\24\5\0"+
    "\4\24\3\0\2\24\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\173\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\1\u01ad\25\24\5\0\4\24\3\0\2\24\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\173\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\6\24\1\u0160\17\24\5\0\4\24"+
    "\3\0\2\24\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\173\2\24\2\0\4\24\20\0\1\24\1\21\4\24"+
    "\1\372\21\24\5\0\4\24\3\0\2\24\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\173\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\2\24\1\u01ae\23\24\5\0\4\24"+
    "\3\0\2\24\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\173\2\24\2\0\4\24\20\0\1\24\1\21\26\24"+
    "\5\0\4\24\3\0\1\24\1\u0150\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\4\24\1\u01af\21\24\5\0\4\24\3\0"+
    "\2\24\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\6\24\1\254"+
    "\17\24\5\0\4\24\3\0\2\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\3\24\1\u01b0\22\24\5\0\4\24\3\0"+
    "\2\24\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\7\24\1\372"+
    "\16\24\5\0\4\24\3\0\2\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\17\24\1\u01b1\6\24\5\0\4\24\3\0"+
    "\2\24\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\4\24\1\u0160"+
    "\21\24\5\0\4\24\3\0\2\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\12\24\1\u01b2\13\24\5\0\4\24\3\0"+
    "\2\24\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\1\u01b3\25\24"+
    "\5\0\4\24\3\0\2\24\1\0\1\21\2\0\6\24"+
    "\1\0\1\21\1\173\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\4\24\1\u01b4\21\24\5\0\4\24\3\0\2\24"+
    "\1\0\1\21\2\0\5\24\1\u01b5\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\26\24\5\0"+
    "\4\24\3\0\2\24\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\173\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\6\24\1\u01b6\17\24\5\0\4\24\3\0\2\24\1\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\173\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\6\24\1\u01b7\17\24\5\0"+
    "\4\24\3\0\2\24\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\173\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\6\24\1\u0108\17\24\5\0\4\24\3\0\2\24\1\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\173\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\11\24\1\u01b8\1\24\1\u01b9"+
    "\12\24\5\0\4\24\3\0\2\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\3\24\1\u01ba\22\24\5\0\4\24\3\0"+
    "\2\24\42\0\1\u016a\6\0\1\u010e\45\0\6\u0169\1\0"+
    "\1\u01bb\1\0\1\u01bb\2\u0169\1\u01bb\4\u0169\2\u01bb\1\0"+
    "\2\u01bb\1\0\1\u01bb\2\0\6\u01bb\1\0\1\u0169\1\u01bb"+
    "\26\u0169\2\0\1\u01bb\1\0\1\u01bb\4\u0169\3\u01bb\2\u0169"+
    "\17\0\1\u01bc\143\0\1\u01bd\124\0\1\u01be\105\0\1\u017a"+
    "\1\0\1\u01bf\44\0\1\u01c0\163\0\1\u01c1\75\0\1\u01c2"+
    "\117\0\1\u01c3\115\0\1\u01c4\104\0\1\u017a\116\0\1\u0179"+
    "\104\0\1\u01c5\117\0\1\u01c6\114\0\1\u011a\121\0\1\u01c7"+
    "\100\0\1\u0177\124\0\1\u0177\104\0\1\u01c8\123\0\1\u01c9"+
    "\35\0\1\u01ca\112\0\1\u01cb\157\0\1\u01cc\105\0\1\u01cd"+
    "\112\0\1\u01ce\131\0\1\u01cf\67\0\1\u0177\126\0\1\u01d0"+
    "\76\0\1\u01d1\122\0\1\u01d2\120\0\1\u01d3\115\0\1\u017a"+
    "\101\0\1\u01d4\122\0\1\u0177\110\0\1\u01d5\101\0\1\u01d6"+
    "\115\0\1\u01d7\105\0\1\u01d8\117\0\1\u01d9\123\0\1\u0177"+
    "\100\0\1\u0177\111\0\1\u01da\106\0\1\u01db\121\0\1\u01c6"+
    "\103\0\1\u0184\135\0\1\u01dc\72\0\1\u01dd\14\0\1\u01de"+
    "\100\0\1\u017a\114\0\1\u01df\104\0\1\u01e0\103\0\1\u019e"+
    "\6\0\1\u0136\45\0\6\u019d\1\0\1\u01e1\1\0\1\u01e1"+
    "\2\u019d\1\u01e1\4\u019d\2\u01e1\1\0\2\u01e1\1\0\1\u01e1"+
    "\2\0\6\u01e1\1\0\1\u019d\1\u01e1\26\u019d\2\0\1\u01e1"+
    "\1\0\1\u01e1\4\u019d\3\u01e1\2\u019d\17\0\1\u01e2\145\0"+
    "\1\u01e3\121\0\1\u01e4\73\0\1\u01a3\6\0\1\u013c\45\0"+
    "\6\u01a2\1\0\1\u01e5\1\0\1\u01e5\2\u01a2\1\u01e5\4\u01a2"+
    "\2\u01e5\1\0\2\u01e5\1\0\1\u01e5\2\0\6\u01e5\1\0"+
    "\1\u01a2\1\u01e5\26\u01a2\2\0\1\u01e5\1\0\1\u01e5\4\u01a2"+
    "\3\u01e5\2\u01a2\17\0\1\u01e6\176\0\1\u01e7\51\0\1\u01a8"+
    "\6\0\1\u0144\45\0\6\u01a7\1\0\1\u01e8\1\0\1\u01e8"+
    "\2\u01a7\1\u01e8\4\u01a7\2\u01e8\1\0\2\u01e8\1\0\1\u01e8"+
    "\2\0\6\u01e8\1\0\1\u01a7\1\u01e8\26\u01a7\2\0\1\u01e8"+
    "\1\0\1\u01e8\4\u01a7\3\u01e8\2\u01a7\17\0\1\u01e9\74\0"+
    "\1\21\2\0\1\21\4\u01ea\1\21\1\0\4\21\2\0"+
    "\2\21\2\u01ea\20\0\2\21\2\u01ea\3\21\2\u01ea\10\21"+
    "\1\u01ea\2\21\1\u01ea\3\21\5\0\3\u01ea\1\21\3\0"+
    "\2\21\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\3\24\1\u01eb"+
    "\22\24\5\0\4\24\3\0\2\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\15\24\1\u01ec\10\24\5\0\4\24\3\0"+
    "\2\24\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\5\24\1\204"+
    "\20\24\5\0\4\24\3\0\2\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\7\24\1\u01ed\16\24\5\0\4\24\3\0"+
    "\2\24\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\12\24\1\u01ee"+
    "\13\24\5\0\4\24\3\0\2\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\6\24\1\u01ef\17\24\5\0\4\24\3\0"+
    "\2\24\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\4\24\1\u01f0"+
    "\21\24\5\0\4\24\3\0\2\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\17\24\1\u01f1\6\24\5\0\4\24\3\0"+
    "\2\24\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\4\24\1\u01f2"+
    "\21\24\5\0\4\24\3\0\2\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\2\24\1\u01f3\23\24\5\0\4\24\3\0"+
    "\2\24\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\17\24\1\204"+
    "\6\24\5\0\4\24\3\0\2\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\3\24\1\u0160\22\24\5\0\4\24\3\0"+
    "\2\24\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\4\24\1\u01f4"+
    "\21\24\5\0\4\24\3\0\2\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\14\24\1\u01f5\11\24\5\0\4\24\3\0"+
    "\2\24\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\6\24\1\u01f6"+
    "\17\24\5\0\4\24\3\0\2\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\10\24\1\347\15\24\5\0\4\24\3\0"+
    "\2\24\17\0\1\u0169\150\0\1\u01f7\120\0\1\u0191\110\0"+
    "\1\u0177\107\0\1\u011a\117\0\1\u01d7\104\0\1\u01f8\110\0"+
    "\1\u01f9\110\0\1\u017a\110\0\1\u01fa\122\0\1\u0192\117\0"+
    "\1\u017a\114\0\1\u01fb\107\0\1\u01fc\102\0\1\u01fd\116\0"+
    "\1\u01fe\103\0\1\u01ff\113\0\1\u0200\113\0\1\u0201\113\0"+
    "\1\u0202\111\0\1\u0177\127\0\1\u01c0\76\0\1\u0203\112\0"+
    "\1\u0204\120\0\1\u0205\104\0\1\u011a\106\0\1\u011b\116\0"+
    "\1\u0177\106\0\1\u0206\114\0\1\u0207\116\0\1\u0208\46\0"+
    "\1\u0209\150\0\1\u020a\120\0\1\u020b\112\0\1\u020c\104\0"+
    "\1\u020d\122\0\1\u020e\52\0\1\u019d\156\0\1\u020f\114\0"+
    "\1\u0210\44\0\1\u01a2\177\0\1\u0211\25\0\1\u01a7\74\0"+
    "\1\21\2\0\1\21\4\24\1\21\1\0\4\21\2\0"+
    "\2\21\2\24\20\0\2\21\2\24\3\21\2\24\10\21"+
    "\1\24\2\21\1\24\3\21\5\0\3\24\1\21\3\0"+
    "\2\21\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\4\24\1\u0212"+
    "\21\24\5\0\4\24\3\0\2\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\2\24\1\u0213\23\24\5\0\4\24\3\0"+
    "\2\24\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\1\u0214\25\24"+
    "\5\0\4\24\3\0\2\24\1\0\1\21\2\0\6\24"+
    "\1\0\1\21\1\173\1\u0215\1\24\2\0\4\24\20\0"+
    "\1\24\1\21\26\24\5\0\4\24\3\0\2\24\1\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\173\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\6\24\1\u0149\17\24\5\0"+
    "\4\24\3\0\2\24\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\173\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\6\24\1\u0216\17\24\5\0\4\24\3\0\2\24\1\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\173\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\6\24\1\u0217\17\24\5\0"+
    "\4\24\3\0\2\24\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\173\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\6\24\1\u0218\17\24\5\0\4\24\3\0\2\24\1\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\173\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\12\24\1\u0154\13\24\5\0"+
    "\4\24\3\0\2\24\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\173\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\17\24\1\u0219\6\24\5\0\4\24\3\0\2\24\53\0"+
    "\1\u021a\120\0\1\u0204\100\0\1\u021b\116\0\1\u021c\114\0"+
    "\1\u021d\116\0\1\u021e\112\0\1\u021f\104\0\1\u0199\106\0"+
    "\1\u0220\131\0\1\u0221\73\0\1\u0185\3\0\1\u0222\116\0"+
    "\1\u0223\114\0\1\u01d8\103\0\1\u017a\111\0\1\u011a\117\0"+
    "\1\u0177\123\0\1\u0224\77\0\1\u0225\114\0\1\u01d0\106\0"+
    "\1\u011a\114\0\1\u0226\111\0\1\u0227\111\0\1\u01e0\123\0"+
    "\1\u01bf\102\0\1\u0228\40\0\26\u0210\1\u0177\64\u0210\104\0"+
    "\1\u0229\6\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\10\24\1\u022a"+
    "\15\24\5\0\4\24\3\0\2\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\16\24\1\u022b\7\24\5\0\4\24\3\0"+
    "\2\24\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\3\24\1\u0150"+
    "\22\24\5\0\4\24\3\0\2\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\6\24\1\u022c\17\24\5\0\4\24\3\0"+
    "\2\24\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\4\24\1\u0154"+
    "\21\24\5\0\4\24\3\0\2\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\5\24\1\u022d\20\24\5\0\4\24\3\0"+
    "\2\24\1\0\1\21\2\0\6\24\1\0\1\21\1\173"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\12\24\1\u01ad"+
    "\13\24\5\0\4\24\3\0\2\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\173\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\4\24\1\u01b8\21\24\5\0\4\24\3\0"+
    "\2\24\63\0\1\u021d\103\0\1\u01d0\126\0\1\u0177\113\0"+
    "\1\u0177\77\0\1\u021c\110\0\1\u018b\113\0\1\u022e\46\0"+
    "\1\u022f\161\0\1\u0230\101\0\1\u0178\112\0\1\u0226\115\0"+
    "\1\u0231\112\0\1\u021c\117\0\1\u0232\137\0\1\u0233\7\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\173\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\24\24\1\u0160\1\24\5\0"+
    "\4\24\3\0\2\24\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\173\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\10\24\1\u0160\15\24\5\0\4\24\3\0\2\24\1\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\173\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\24\24\1\u0234\1\24\5\0"+
    "\4\24\3\0\2\24\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\173\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\3\24\1\u0235\22\24\5\0\4\24\3\0\2\24\51\0"+
    "\1\u0192\115\0\1\u0236\120\0\1\u01d0\105\0\1\u0191\104\0"+
    "\1\u0237\144\0\1\u0238\12\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\173\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\3\24\1\u0239\22\24\5\0\4\24\3\0\2\24\1\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\173\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\10\24\1\u023a\15\24\5\0"+
    "\4\24\3\0\2\24\52\0\1\u023b\116\0\1\u0210\35\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\173\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\4\24\1\u015f\21\24\5\0"+
    "\4\24\3\0\2\24\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\173\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\14\24\1\u023c\11\24\5\0\4\24\3\0\2\24\51\0"+
    "\1\u0177\11\0\1\u01d7\30\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\173\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\12\24\1\u023d\13\24\5\0\4\24\3\0\2\24\1\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\173\1\u023e\1\24"+
    "\2\0\4\24\20\0\1\24\1\21\26\24\5\0\4\24"+
    "\3\0\2\24\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\173\2\24\2\0\4\24\20\0\1\24\1\21\22\24"+
    "\1\u023f\3\24\5\0\4\24\3\0\2\24\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\173\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\14\24\1\254\11\24\5\0\4\24"+
    "\3\0\2\24\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[37950];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\2\1\3\0\2\1\1\11\4\1\1\11\4\1"+
    "\2\11\4\1\1\11\17\1\3\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\11\5\1"+
    "\1\11\10\1\1\11\5\1\1\11\2\1\1\11\1\1"+
    "\1\11\5\1\1\11\2\1\1\11\1\1\3\11\3\1"+
    "\3\11\1\1\1\11\4\1\1\11\2\1\1\11\1\1"+
    "\1\11\1\1\1\11\13\1\2\0\1\11\3\1\2\0"+
    "\1\11\36\1\1\11\2\1\1\11\4\0\1\11\2\0"+
    "\1\11\32\0\3\1\2\11\5\0\1\11\2\0\2\11"+
    "\2\1\1\0\45\1\64\0\1\1\2\0\1\11\5\0"+
    "\1\11\3\1\1\11\32\1\1\0\1\11\1\0\1\1"+
    "\15\0\1\11\45\0\1\1\4\0\1\1\1\0\1\11"+
    "\2\0\1\1\1\0\1\11\21\1\15\0\1\1\20\0"+
    "\1\1\20\0\15\1\33\0\11\1\4\0\1\1\12\0"+
    "\4\1\6\0\2\1\2\0\1\11\2\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[575];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

	/**
	 * Token type specifying we're in a JavaScript multiline comment.
	 */
	private static final int INTERNAL_IN_JS_MLC				= -8;

	/**
	 * Token type specifying we're in a JavaScript documentation comment.
	 */
	private static final int INTERNAL_IN_JS_COMMENT_DOCUMENTATION = -9;
	
	/**
	 * Token type specifying we're in an invalid multi-line JS string.
	 */
	private static final int INTERNAL_IN_JS_STRING_INVALID	= -10;

	/**
	 * Token type specifying we're in a valid multi-line JS string.
	 */
	private static final int INTERNAL_IN_JS_STRING_VALID		= -11;

	/**
	 * Token type specifying we're in an invalid multi-line JS single-quoted string.
	 */
	private static final int INTERNAL_IN_JS_CHAR_INVALID	= -12;

	/**
	 * Token type specifying we're in a valid multi-line JS single-quoted string.
	 */
	private static final int INTERNAL_IN_JS_CHAR_VALID		= -13;

	private static final int INTERNAL_E4X = -14;

	private static final int INTERNAL_E4X_INTAG = -15;

	private static final int INTERNAL_E4X_MARKUP_PROCESSING_INSTRUCTION = -16;

	private static final int INTERNAL_IN_E4X_COMMENT = -17;

	private static final int INTERNAL_E4X_DTD = -18;

	private static final int INTERNAL_E4X_DTD_INTERNAL = -19;

	private static final int INTERNAL_E4X_ATTR_SINGLE = -20;

	private static final int INTERNAL_E4X_ATTR_DOUBLE = -21;

	private static final int INTERNAL_E4X_MARKUP_CDATA = -22;

	/**
	 * Token type specifying we're in a valid multi-line template literal.
	 */
	private static final int INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID = -23;

	/**
	 * Token type specifying we're in an invalid multi-line template literal.
	 */
	private static final int INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID = -24;

	/**
	 * When in the JS_STRING state, whether the current string is valid.
	 */
	private boolean validJSString;

	/**
	 * Whether we're in an internal DTD.  Only valid if in an e4x DTD.
	 */
	private boolean e4x_inInternalDtd;

	/**
	 * The previous e4x state.  Only valid if in an e4x state.
	 */
	private int e4x_prevState;

	/**
	 * The version of JavaScript being highlighted.
	 */
	private static String jsVersion;

	/**
	 * Whether e4x is being highlighted.
	 */
	private static boolean e4xSupported;

	/**
	 * Language state set on JS tokens.  Must be 0.
	 */
	private static final int LANG_INDEX_DEFAULT	= 0;

	/**
	 * Language state set on E4X tokens.
	 */
	private static final int LANG_INDEX_E4X = 1;

	private Stack<Boolean> varDepths;

	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public OpenScadTokenMaker() {
		super();
	}


	static {
		jsVersion = "1.7"; // Many folks using JS tend to be bleeding edge
		e4xSupported = true;
	}


	/**
	 * Adds the token specified to the current linked list of tokens as an
	 * "end token;" that is, at <code>zzMarkedPos</code>.
	 *
	 * @param tokenType The token's type.
	 */
	private void addEndToken(int tokenType) {
		addToken(zzMarkedPos,zzMarkedPos, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the closest {@link TokenTypes} "standard" token type for a given
	 * "internal" token type (e.g. one whose value is <code>&lt; 0</code>).
	 */
	 @Override
	public int getClosestStandardTokenTypeForInternalType(int type) {
		switch (type) {
			case INTERNAL_IN_JS_MLC:
				return TokenTypes.COMMENT_MULTILINE;
			case INTERNAL_IN_JS_COMMENT_DOCUMENTATION:
				return TokenTypes.COMMENT_DOCUMENTATION;
			case INTERNAL_IN_JS_STRING_INVALID:
			case INTERNAL_IN_JS_STRING_VALID:
			case INTERNAL_IN_JS_CHAR_INVALID:
			case INTERNAL_IN_JS_CHAR_VALID:
				return TokenTypes.LITERAL_STRING_DOUBLE_QUOTE;
			case INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID:
				return TokenTypes.LITERAL_BACKQUOTE;
			case INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID:
				return TokenTypes.ERROR_STRING_DOUBLE;
		}
		return type;
	}


	/**
	 * Returns the JavaScript version being highlighted.
	 *
	 * @return Supported JavaScript version.
	 * @see #isJavaScriptCompatible(String)
	 */
	public static String getJavaScriptVersion() {
		return jsVersion;
	}


	/**
	 * {@inheritDoc}
	 */
	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	@Override
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;
		validJSString = true;
		e4x_prevState = YYINITIAL;
		e4x_inInternalDtd = false;
		int languageIndex = LANG_INDEX_DEFAULT;

		// Start off in the proper state.
		int state = YYINITIAL;
		switch (initialTokenType) {
			case INTERNAL_IN_JS_MLC:
				state = JS_MLC;
				break;
			case INTERNAL_IN_JS_COMMENT_DOCUMENTATION:
				state = JS_DOCCOMMENT;
				start = text.offset;
				break;
			case INTERNAL_IN_JS_STRING_INVALID:
				state = JS_STRING;
				validJSString = false;
				break;
			case INTERNAL_IN_JS_STRING_VALID:
				state = JS_STRING;
				break;
			case INTERNAL_IN_JS_CHAR_INVALID:
				state = JS_CHAR;
				validJSString = false;
				break;
			case INTERNAL_IN_JS_CHAR_VALID:
				state = JS_CHAR;
				break;
			case INTERNAL_E4X:
				state = E4X;
				languageIndex = LANG_INDEX_E4X;
				break;
			case INTERNAL_E4X_INTAG:
				state = E4X_INTAG;
				languageIndex = LANG_INDEX_E4X;
				break;
			case INTERNAL_E4X_MARKUP_PROCESSING_INSTRUCTION:
				state = E4X_PI;
				languageIndex = LANG_INDEX_E4X;
				break;
			case INTERNAL_E4X_DTD:
				state = E4X_DTD;
				languageIndex = LANG_INDEX_E4X;
				break;
			case INTERNAL_E4X_DTD_INTERNAL:
				state = E4X_DTD;
				e4x_inInternalDtd = true;
				languageIndex = LANG_INDEX_E4X;
				break;
			case INTERNAL_E4X_ATTR_SINGLE:
				state = E4X_INATTR_SINGLE;
				languageIndex = LANG_INDEX_E4X;
				break;
			case INTERNAL_E4X_ATTR_DOUBLE:
				state = E4X_INATTR_DOUBLE;
				languageIndex = LANG_INDEX_E4X;
				break;
			case INTERNAL_E4X_MARKUP_CDATA:
				state = E4X_CDATA;
				languageIndex = LANG_INDEX_E4X;
				break;
			case INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID:
				state = JS_TEMPLATE_LITERAL;
				validJSString = true;
				break;
			case INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID:
				state = JS_TEMPLATE_LITERAL;
				validJSString = false;
				break;
			default:
				if (initialTokenType<-1024) { // INTERNAL_IN_E4X_COMMENT - prevState
					int main = -(-initialTokenType & 0xffffff00);
					switch (main) {
						default: // Should never happen
						case INTERNAL_IN_E4X_COMMENT:
							state = E4X_COMMENT;
							break;
					}
					e4x_prevState = -initialTokenType&0xff;
					languageIndex = LANG_INDEX_E4X;
				}
				else { // Shouldn't happen
					state = Token.NULL;
				}
		}

		setLanguageIndex(languageIndex);
		start = text.offset;
		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Returns whether e4x is being highlighted.
	 *
	 * @return Whether e4x is being highlighted.
	 * @see #setE4xSupported(boolean)
	 */
	public static boolean isE4xSupported() {
		return e4xSupported;
	}


	/**
	 * Returns whether features for a specific JS version should be honored
	 * while highlighting.
	 * 
	 * @param version JavaScript version required 
	 * @return Whether the JavaScript version is the same or greater than
	 *         version required. 
	 */
	public static boolean isJavaScriptCompatible(String version) {
		return jsVersion.compareTo(version) >= 0;
	}


	/**
	 * Sets whether e4x should be highlighted.  A repaint should be forced on
	 * all <code>RSyntaxTextArea</code>s editing JavaScript if this property
	 * is changed to see the difference.
	 *
	 * @param supported Whether e4x should be highlighted.
	 * @see #isE4xSupported()
	 */
	public static void setE4xSupported(boolean supported) {
		e4xSupported = supported;
	}


	/**
	 * Set the supported JavaScript version because some keywords were
	 * introduced on or after this version.
	 *
	 * @param javaScriptVersion The version of JavaScript to support, such as
	 *        "<code>1.5</code>" or "<code>1.6</code>".
	 * @see #isJavaScriptCompatible(String)
	 * @see #getJavaScriptVersion()
	 */
	public static void setJavaScriptVersion(String javaScriptVersion) {
		jsVersion = javaScriptVersion;
	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public OpenScadTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public OpenScadTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefillOld() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyresetOld(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 35: 
          { start = zzMarkedPos-1; yybegin(E4X_INATTR_SINGLE);
          }
        case 80: break;
        case 48: 
          { int start = zzStartRead;
										int operatorLen = yycharat(0)=='+' ? 2 : 1;
										int yylen = yylength(); // Cache before first addToken() invalidates it
										//System.out.println("'" + yytext() + "': " + yylength() + ", " + (operatorLen+1));
										addToken(zzStartRead,zzStartRead+operatorLen-1, Token.OPERATOR);
										if (yylen>operatorLen+1) {
											//System.out.println((start+operatorLen) + ", " + (zzMarkedPos-2));
											addToken(start+operatorLen,zzMarkedPos-2, Token.WHITESPACE);
										}
										zzStartRead = zzCurrentPos = zzMarkedPos = zzMarkedPos - 1;
										if (isE4xSupported()) {
											// Scanning will continue with "<" as markup tag start
											yybegin(E4X, LANG_INDEX_E4X);
										}
										// Found e4x (or syntax error) but option not enabled;
										// Scanning will continue at "<" as operator
          }
        case 81: break;
        case 34: 
          { start = zzMarkedPos-1; yybegin(E4X_INATTR_DOUBLE);
          }
        case 82: break;
        case 43: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 83: break;
        case 78: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 84: break;
        case 27: 
          { addToken(start,zzStartRead-1, Token.MARKUP_DTD); addEndToken(e4x_inInternalDtd ? INTERNAL_E4X_DTD_INTERNAL : INTERNAL_E4X_DTD); return firstToken;
          }
        case 85: break;
        case 40: 
          { int type = validJSString ? Token.LITERAL_BACKQUOTE : Token.ERROR_STRING_DOUBLE; addToken(start,zzStartRead, type); yybegin(YYINITIAL);
          }
        case 86: break;
        case 3: 
          { addToken(Token.WHITESPACE);
          }
        case 87: break;
        case 18: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addEndToken(INTERNAL_IN_JS_MLC); return firstToken;
          }
        case 88: break;
        case 70: 
          { addToken(Token.FUNCTION);
          }
        case 89: break;
        case 55: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addToken(temp,zzMarkedPos-1, Token.COMMENT_MARKUP); start = zzMarkedPos;
          }
        case 90: break;
        case 42: 
          { if (!varDepths.empty()) {
								varDepths.pop();
								if (varDepths.empty()) {
									addToken(start,zzStartRead, Token.VARIABLE);
									start = zzMarkedPos;
									yybegin(JS_TEMPLATE_LITERAL);
								}
							}
          }
        case 91: break;
        case 39: 
          { /* Skip valid '$' that is not part of template literal expression start */
          }
        case 92: break;
        case 11: 
          { start = zzMarkedPos-1; validJSString = true; yybegin(JS_TEMPLATE_LITERAL);
          }
        case 93: break;
        case 50: 
          { /* Skip all escaped chars. */
          }
        case 94: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 95: break;
        case 75: 
          { start = zzStartRead; e4x_prevState = zzLexicalState; yybegin(E4X_COMMENT);
          }
        case 96: break;
        case 66: 
          { int temp=zzStartRead; yybegin(E4X); addToken(start,zzStartRead-1, Token.MARKUP_CDATA); addToken(temp,zzMarkedPos-1, Token.MARKUP_CDATA_DELIMITER);
          }
        case 97: break;
        case 61: 
          { varDepths.push(Boolean.TRUE);
          }
        case 98: break;
        case 52: 
          { /* Invalid latin-1 character \xXX */ validJSString = false;
          }
        case 99: break;
        case 67: 
          { addToken(Token.COMMENT_MULTILINE);
          }
        case 100: break;
        case 58: 
          { start = zzMarkedPos-2; yybegin(E4X_PI);
          }
        case 101: break;
        case 36: 
          { yybegin(E4X_INTAG); addToken(start,zzStartRead, Token.MARKUP_TAG_ATTRIBUTE_VALUE);
          }
        case 102: break;
        case 14: 
          { int type = validJSString ? Token.LITERAL_STRING_DOUBLE_QUOTE : Token.ERROR_STRING_DOUBLE; addToken(start,zzStartRead, type); yybegin(YYINITIAL);
          }
        case 103: break;
        case 62: 
          { boolean highlightedAsRegex = false;
										if (firstToken==null) {
											addToken(Token.REGEX);
											highlightedAsRegex = true;
										}
										else {
											// If this is *likely* to be a regex, based on
											// the previous token, highlight it as such.
											Token t = firstToken.getLastNonCommentNonWhitespaceToken();
											if (RSyntaxUtilities.regexCanFollowInJavaScript(t)) {
												addToken(Token.REGEX);
												highlightedAsRegex = true;
											}
										}
										// If it doesn't *appear* to be a regex, highlight it as
										// individual tokens.
										if (!highlightedAsRegex) {
											int temp = zzStartRead + 1;
											addToken(zzStartRead, zzStartRead, Token.OPERATOR);
											zzStartRead = zzCurrentPos = zzMarkedPos = temp;
										}
          }
        case 104: break;
        case 20: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 105: break;
        case 24: 
          { yybegin(YYINITIAL, LANG_INDEX_DEFAULT); addToken(Token.IDENTIFIER);
          }
        case 106: break;
        case 51: 
          { /* Invalid Unicode character \\uXXXX */ validJSString = false;
          }
        case 107: break;
        case 41: 
          { // TODO: This isn't right.  The expression and its depth should continue to the next line.
							addToken(start,zzStartRead-1, Token.VARIABLE); addEndToken(INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID); return firstToken;
          }
        case 108: break;
        case 77: 
          { int temp = zzStartRead; addToken(start,zzStartRead-1, Token.MARKUP_DTD); start = temp; e4x_prevState = zzLexicalState; yybegin(E4X_COMMENT);
          }
        case 109: break;
        case 64: 
          { int count = yylength();
									addToken(zzStartRead,zzStartRead+1, Token.MARKUP_TAG_DELIMITER);
									addToken(zzMarkedPos-(count-2), zzMarkedPos-1, Token.MARKUP_TAG_NAME);
									yybegin(E4X_INTAG);
          }
        case 110: break;
        case 65: 
          { int temp = zzMarkedPos; addToken(start,zzStartRead+2, Token.MARKUP_COMMENT); start = temp; yybegin(e4x_prevState);
          }
        case 111: break;
        case 7: 
          { addToken(Token.OPERATOR);
          }
        case 112: break;
        case 59: 
          { yybegin(E4X); addToken(start,zzStartRead+1, Token.MARKUP_PROCESSING_INSTRUCTION);
          }
        case 113: break;
        case 54: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_DOCUMENTATION);
          }
        case 114: break;
        case 19: 
          { addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addEndToken(INTERNAL_IN_JS_COMMENT_DOCUMENTATION); return firstToken;
          }
        case 115: break;
        case 26: 
          { addToken(start,zzStartRead-1, Token.MARKUP_PROCESSING_INSTRUCTION); addEndToken(INTERNAL_E4X_MARKUP_PROCESSING_INSTRUCTION); return firstToken;
          }
        case 116: break;
        case 5: 
          { addToken(Token.IDENTIFIER);
          }
        case 117: break;
        case 71: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 118: break;
        case 74: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 119: break;
        case 63: 
          { start = zzMarkedPos-3; yybegin(JS_DOCCOMMENT);
          }
        case 120: break;
        case 9: 
          { start = zzMarkedPos-1; validJSString = true; yybegin(JS_STRING);
          }
        case 121: break;
        case 57: 
          { start = zzMarkedPos-2; e4x_inInternalDtd = false; yybegin(E4X_DTD);
          }
        case 122: break;
        case 25: 
          { addToken(start,zzStartRead-1, Token.MARKUP_COMMENT); addEndToken(INTERNAL_IN_E4X_COMMENT - e4x_prevState); return firstToken;
          }
        case 123: break;
        case 10: 
          { start = zzMarkedPos-1; validJSString = true; yybegin(JS_CHAR);
          }
        case 124: break;
        case 29: 
          { e4x_inInternalDtd = true;
          }
        case 125: break;
        case 73: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_DOCUMENTATION); start = zzMarkedPos;
          }
        case 126: break;
        case 47: 
          { start = zzMarkedPos-2; yybegin(JS_MLC);
          }
        case 127: break;
        case 45: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 128: break;
        case 79: 
          { addToken(Token.MARKUP_CDATA_DELIMITER); start = zzMarkedPos; yybegin(E4X_CDATA);
          }
        case 129: break;
        case 32: 
          { addToken(Token.MARKUP_TAG_DELIMITER); /* Not valid but we'll still accept it */
          }
        case 130: break;
        case 2: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 131: break;
        case 76: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.MARKUP_COMMENT); addHyperlinkToken(temp,zzMarkedPos-1, Token.MARKUP_COMMENT); start = zzMarkedPos;
          }
        case 132: break;
        case 33: 
          { yybegin(E4X); addToken(Token.MARKUP_TAG_DELIMITER);
          }
        case 133: break;
        case 23: 
          { addToken(Token.MARKUP_ENTITY_REFERENCE);
          }
        case 134: break;
        case 68: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 135: break;
        case 4: 
          { addNullToken(); return firstToken;
          }
        case 136: break;
        case 49: 
          { addToken(Token.RESERVED_WORD);
          }
        case 137: break;
        case 13: 
          { /* Line ending in '\' => continue to next line. */
								if (validJSString) {
									addToken(start,zzStartRead, Token.LITERAL_STRING_DOUBLE_QUOTE);
									addEndToken(INTERNAL_IN_JS_STRING_VALID);
								}
								else {
									addToken(start,zzStartRead, Token.ERROR_STRING_DOUBLE);
									addEndToken(INTERNAL_IN_JS_STRING_INVALID);
								}
								return firstToken;
          }
        case 138: break;
        case 53: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 139: break;
        case 69: 
          { addToken(Token.DATA_TYPE);
          }
        case 140: break;
        case 22: 
          { addToken(Token.MARKUP_TAG_DELIMITER); yybegin(E4X_INTAG);
          }
        case 141: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 142: break;
        case 38: 
          { if (validJSString) {
									addToken(start,zzStartRead, Token.LITERAL_BACKQUOTE);
									addEndToken(INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID);
								}
								else {
									addToken(start,zzStartRead, Token.ERROR_STRING_DOUBLE);
									addEndToken(INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID);
								}
								return firstToken;
          }
        case 143: break;
        case 31: 
          { addToken(Token.MARKUP_TAG_ATTRIBUTE);
          }
        case 144: break;
        case 16: 
          { /* Line ending in '\' => continue to next line. */
								if (validJSString) {
									addToken(start,zzStartRead, Token.LITERAL_CHAR);
									addEndToken(INTERNAL_IN_JS_CHAR_VALID);
								}
								else {
									addToken(start,zzStartRead, Token.ERROR_CHAR);
									addEndToken(INTERNAL_IN_JS_CHAR_INVALID);
								}
								return firstToken;
          }
        case 145: break;
        case 72: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addToken(temp,zzMarkedPos-1, Token.COMMENT_KEYWORD); start = zzMarkedPos;
          }
        case 146: break;
        case 17: 
          { int type = validJSString ? Token.LITERAL_CHAR : Token.ERROR_CHAR; addToken(start,zzStartRead, type); yybegin(YYINITIAL);
          }
        case 147: break;
        case 46: 
          { start = zzMarkedPos-2; yybegin(JS_EOL_COMMENT);
          }
        case 148: break;
        case 21: 
          { addEndToken(INTERNAL_E4X); return firstToken;
          }
        case 149: break;
        case 56: 
          { int count = yylength();
									addToken(zzStartRead,zzStartRead, Token.MARKUP_TAG_DELIMITER);
									addToken(zzMarkedPos-(count-1), zzMarkedPos-1, Token.MARKUP_TAG_NAME);
									yybegin(E4X_INTAG);
          }
        case 150: break;
        case 44: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 151: break;
        case 28: 
          { if (!e4x_inInternalDtd) { yybegin(E4X); addToken(start,zzStartRead, Token.MARKUP_DTD); }
          }
        case 152: break;
        case 6: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 153: break;
        case 30: 
          { e4x_inInternalDtd = false;
          }
        case 154: break;
        case 37: 
          { if (validJSString) {
									addToken(start, zzStartRead - 1, Token.LITERAL_BACKQUOTE);
									addEndToken(INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID);
								}
								else {
									addToken(start,zzStartRead - 1, Token.ERROR_STRING_DOUBLE);
									addEndToken(INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID);
								}
								return firstToken;
          }
        case 155: break;
        case 60: 
          { addToken(start, zzStartRead - 1, Token.LITERAL_BACKQUOTE);
								start = zzMarkedPos-2;
								if (varDepths==null) {
									varDepths = new Stack<Boolean>();
								}
								else {
									varDepths.clear();
								}
								varDepths.push(Boolean.TRUE);
								yybegin(JS_TEMPLATE_LITERAL_EXPR);
          }
        case 156: break;
        case 15: 
          { addToken(start,zzStartRead-1, Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 157: break;
        case 1: 
          { 
          }
        case 158: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case JS_STRING: {
              addToken(start,zzStartRead-1, Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
            }
            case 576: break;
            case E4X: {
              addEndToken(INTERNAL_E4X); return firstToken;
            }
            case 577: break;
            case E4X_INTAG: {
              addToken(start,zzStartRead-1, INTERNAL_E4X_INTAG); return firstToken;
            }
            case 578: break;
            case E4X_PI: {
              addToken(start,zzStartRead-1, Token.MARKUP_PROCESSING_INSTRUCTION); addEndToken(INTERNAL_E4X_MARKUP_PROCESSING_INSTRUCTION); return firstToken;
            }
            case 579: break;
            case JS_MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addEndToken(INTERNAL_IN_JS_MLC); return firstToken;
            }
            case 580: break;
            case JS_CHAR: {
              addToken(start,zzStartRead-1, Token.ERROR_CHAR); addNullToken(); return firstToken;
            }
            case 581: break;
            case JS_EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 582: break;
            case E4X_COMMENT: {
              addToken(start,zzStartRead-1, Token.MARKUP_COMMENT); addEndToken(INTERNAL_IN_E4X_COMMENT - e4x_prevState); return firstToken;
            }
            case 583: break;
            case JS_DOCCOMMENT: {
              yybegin(YYINITIAL); addToken(start,zzEndRead, Token.COMMENT_DOCUMENTATION); addEndToken(INTERNAL_IN_JS_COMMENT_DOCUMENTATION); return firstToken;
            }
            case 584: break;
            case E4X_DTD: {
              addToken(start,zzStartRead-1, Token.MARKUP_DTD); addEndToken(e4x_inInternalDtd ? INTERNAL_E4X_DTD_INTERNAL : INTERNAL_E4X_DTD); return firstToken;
            }
            case 585: break;
            case JS_TEMPLATE_LITERAL: {
              if (validJSString) {
									addToken(start, zzStartRead - 1, Token.LITERAL_BACKQUOTE);
									addEndToken(INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID);
								}
								else {
									addToken(start,zzStartRead - 1, Token.ERROR_STRING_DOUBLE);
									addEndToken(INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID);
								}
								return firstToken;
            }
            case 586: break;
            case E4X_INATTR_SINGLE: {
              addToken(start,zzStartRead-1, Token.MARKUP_TAG_ATTRIBUTE_VALUE); addEndToken(INTERNAL_E4X_ATTR_SINGLE); return firstToken;
            }
            case 587: break;
            case E4X_INATTR_DOUBLE: {
              addToken(start,zzStartRead-1, Token.MARKUP_TAG_ATTRIBUTE_VALUE); addEndToken(INTERNAL_E4X_ATTR_DOUBLE); return firstToken;
            }
            case 588: break;
            case JS_TEMPLATE_LITERAL_EXPR: {
              // TODO: This isn't right.  The expression and its depth should continue to the next line.
							addToken(start,zzStartRead-1, Token.VARIABLE); addEndToken(INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID); return firstToken;
            }
            case 589: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 590: break;
            case E4X_CDATA: {
              addToken(start,zzStartRead-1, Token.MARKUP_CDATA); addEndToken(INTERNAL_E4X_MARKUP_CDATA); return firstToken;
            }
            case 591: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
